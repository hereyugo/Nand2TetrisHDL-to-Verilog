import re
import traceback

def parse_nand_hdl(hdl_text):
    # Clean lines: remove empty lines and comments
    lines = [line.strip() for line in hdl_text.splitlines()
             if line.strip() and not line.strip().startswith("//")]

    chip_name = None
    in_ports = []
    out_ports = []
    parts = []
    in_parts_section = False

    for line in lines:
        if line.startswith("CHIP"):
            match = re.search(r'CHIP\s+(\w+)', line)
            if match:
                chip_name = match.group(1)

        elif line.startswith("IN"):
            match = re.search(r'IN\s+(.*);', line)
            if match:
                in_ports = [x.strip() for x in match.group(1).split(',')]

        elif line.startswith("OUT"):
            match = re.search(r'OUT\s+(.*);', line)
            if match:
                out_ports = [x.strip() for x in match.group(1).split(',')]
                
        elif line.startswith("PARTS:"):
            in_parts_section = True
            continue
        
        elif in_parts_section:
            if line.strip() == "}":
                in_parts_section = False
                continue
            subparts = [p.strip() for p in line.split(';') if p.strip()]
            parts.extend(subparts)

    if chip_name is None or not in_ports or not out_ports:
        raise ValueError("Missing CHIP, IN, or OUT declaration.")

    return {
        "name": chip_name,
        "inputs": in_ports,
        "outputs": out_ports,
        "parts": parts,
    } 
    
def nand_hdl_to_verilog(hdl_text):
    chip = parse_nand_hdl(hdl_text)
    ports = chip["inputs"] + chip["outputs"]
    inportz = chip["inputs"]
    wires = set()
    body = []

    for idx, part in enumerate(chip["parts"]):
        m = re.match(r'(\w+)\s*\((.*)\)', part)
        if not m:
            raise ValueError(f"Invalid part line: '{part}'")
        gate, conn_str = m.group(1), m.group(2)
        conn_dict = dict()
        for conn in conn_str.split(','):
            if '=' not in conn:
                continue
            key_value = conn.strip().split('=', 1)
            if len(key_value) != 2:
                raise ValueError(f"Malformed connection: '{conn}'")
            key, value = key_value[0].strip(), key_value[1].strip()
            conn_dict[key] = value

        # Track internal wires
        for signal in conn_dict.values():
            if signal not in chip["inputs"] and signal not in chip["outputs"]:
                wires.add(signal)

        instance = f"{gate} {gate.lower()}_{idx}("
        instance += ", ".join([f".{pin}({sig})" for pin, sig in conn_dict.items()])
        instance += ");"
        body.append(instance)

    verilog_lines = [f"module {chip['name']}("]
    for inp in chip['inputs']:
        if chip['inputs']:
            verilog_lines.append(f"  input {inp},")
            
    for j, oup in enumerate(chip['outputs']):    
        if j == len(chip['outputs']) - 1:
            verilog_lines.append(f"  output {oup}\n);\n")
        else:
            verilog_lines.append(f"  output {oup},")
            
    for k, wir in enumerate(wires):        
        if k == len(wires) - 1:
            verilog_lines.append(f"  wire {wir};\n")
        else:
            verilog_lines.append(f"  wire {wir},")
            
    verilog_lines += [f"  {line}" for line in body]
    verilog_lines.append("\nendmodule")

    return "\n".join(verilog_lines)

# --- Interactive prompt ---
print("üì• Insert your Nand HDL code below (finish with an empty line, no empty lines in the code, comments are fine):")
lines = []
while True:
    try:
        line = input()
        if line.strip() == "":
            break
        lines.append(line)
    except EOFError:
        break

examplehdl = "\n".join(lines)

try:
    out = nand_hdl_to_verilog(examplehdl)
    print("\n‚úÖ Translated Verilog code:\n")
    print(out)
except Exception as e:
    print("\n‚ùå Error: Could not translate HDL.")
    print("Details:", e)
    traceback.print_exc()
