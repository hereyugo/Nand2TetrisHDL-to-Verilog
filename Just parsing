import re

def parse_nand_hdl(hdl_text):
    # Clean lines: remove empty lines and comments
    lines = [line.strip() for line in hdl_text.splitlines()
             if line.strip() and not line.strip().startswith("//")]

    chip_name = None
    in_ports = []
    out_ports = []
    parts = []
    in_parts_section = False

    for line in lines:
        if line.startswith("CHIP"):
            match = re.search(r'CHIP\s+(\w+)', line)
            if match:
                chip_name = match.group(1)

        elif line.startswith("IN"):
            match = re.search(r'IN\s+(.*);', line)
            if match:
                in_ports = [x.strip() for x in match.group(1).split(',')]

        elif line.startswith("OUT"):
            match = re.search(r'OUT\s+(.*);', line)
            if match:
                out_ports = [x.strip() for x in match.group(1).split(',')]
                
        elif line.startswith("PARTS:"):
            in_parts_section = True
            continue
        
        elif in_parts_section:
            if line.strip() == "}":
                in_parts_section = False
                continue
            subparts = [p.strip() for p in line.split(';') if p.strip()]
            parts.extend(subparts)

    if chip_name is None or not in_ports or not out_ports:
        raise ValueError("Missing CHIP, IN, or OUT declaration.")

    return {
        "name": chip_name,
        "inputs": in_ports,
        "outputs": out_ports,
        "parts": parts,
    } 
